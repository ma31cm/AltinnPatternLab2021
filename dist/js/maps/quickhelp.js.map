{"version":3,"sources":["handleFocus.js","altinnLoader.js","altinnModal.js","altinnQuickhelp.js","ios11BugWorkaround.js","quickhelp-init.js"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;ACjlfile":"../quickhelp.js","sourcesContent":["/* globals $ */\r\nvar handleFocus = function() {\r\n  // If state on input is 'focus', add class to a-input: 'a-input-focus'\r\n  $('body').on('focus', 'input.form-control', function() {\r\n    $(this).parent().addClass('a-input-focus');\r\n  });\r\n\r\n  $('body').on('blur', 'input.form-control', function() {\r\n    $(this).parent().removeClass('a-input-focus');\r\n  });\r\n\r\n  $('.a-radioButtons-stackedList').find('input[type=radio]').change(function() {\r\n    var me = $(this);\r\n    if (me.is(':checked')) {\r\n      me.parent().addClass('a-js-radioParentGray');\r\n      $('input[type=radio]').each(function() {\r\n        if ($(this).attr('id') !== me.attr('id') &&\r\n          $(this).attr('name') === me.attr('name')) {\r\n          $(this).parent().removeClass('a-js-radioParentGray');\r\n        }\r\n      });\r\n    }\r\n  });\r\n};\r\n","/* globals AltinnLoader:true */\r\n\r\nAltinnLoader = {\r\n  addLoader: function($target) {\r\n    if ($target.find('.loader-container').length === 0) {\r\n      $target.prepend('<div class=\"loader-container\"><div class=\"loader loader-ellipsis\"></div></div>');\r\n    }\r\n    $('button.a-modal-back').attr('disabled', true);\r\n    $('button.a-modal-close').attr('disabled', true);\r\n  },\r\n\r\n  removeLoader: function($target) {\r\n    $target.find('.loader-container').remove();\r\n    $('button.a-modal-back').attr('disabled', false);\r\n    $('button.a-modal-close').attr('disabled', false);\r\n  }\r\n};\r\n","/* globals currentRequest, popoverLocalInit, AltinnModal */\r\n/* globals AltinnModal:true, AltinnLoader */\r\nAltinnModal = {\r\n  closeModal: function(settings) {\r\n    $('body').removeClass('a-modal-background-error a-displayNav');\r\n    $('body').removeClass('a-modal-background-success');\r\n    $(settings.target).modal('hide');\r\n    $('body').append($('.a-stickyHelp-container'));\r\n  },\r\n\r\n  loadModal: function(settings) {\r\n    var currentRequest = $.ajax({\r\n      url: settings.url,\r\n      beforeSend: function() {\r\n        if (typeof currentRequest !== 'undefined') {\r\n          currentRequest.abort();\r\n        }\r\n\r\n        AltinnLoader.addLoader($('body'));\r\n      },\r\n      data: settings.data\r\n    }).always(function() {\r\n    }).done(function(data) {\r\n      var modalPage = $('<div/>', {\r\n        class: 'modalPage',\r\n        html: data\r\n      });\r\n      var page = $('<div/>', {\r\n        class: 'a-page a-current-page',\r\n        data: {\r\n          pageIndex: 1,\r\n          isSuccess: settings.isSuccess,\r\n          isError: settings.isError,\r\n          showModalNav: settings.showModalNav\r\n        },\r\n        html: modalPage\r\n      });\r\n\r\n      $('body').removeClass('a-modal-background-error a-displayNav');\r\n      $('body').removeClass('a-modal-background-success');\r\n\r\n      // if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {\r\n      //   goToModalHeader();\r\n      // }\r\n\r\n      $(settings.target + ' .a-modal-content-target').append(page);\r\n      $(settings.target).trigger('loaded.altinn.modal');\r\n      $(settings.target).find('.a-current-page').first().data().enableDirtyPopover = settings.enableDirtyPopover;\r\n\r\n      // Initialize with backdrop: static to prevent modal from closing when clicking outside,\r\n      // and keyboard: false to prevent ESC from closing the modal\r\n      $(settings.target).modal({\r\n        backdrop: 'static',\r\n        keyboard: false\r\n      });\r\n\r\n      $(settings.target).on('hidden.bs.modal', function() {\r\n        $(settings.target + ' .a-modal-content-target').empty();\r\n        $(settings.target).attr('aria-hidden', true);\r\n        $('#altinnModal').siblings('.row').removeClass('d-none');\r\n      });\r\n\r\n      $(settings.target).on('shown.bs.modal', function() {\r\n        $(settings.target).removeAttr('aria-hidden');\r\n        $('#altinnModal').siblings('.row').addClass('d-none');\r\n      });\r\n      popoverLocalInit();\r\n\r\n      if (settings.isError) {\r\n        $('body').addClass('a-modal-background-error');\r\n        if (settings.showModalNav) {\r\n          $('body').addClass('a-displayNav');\r\n        }\r\n      } else if (settings.isSuccess) {\r\n        $('body').addClass('a-modal-background-success');\r\n      }\r\n\r\n      AltinnLoader.removeLoader($('body'));\r\n      // causes issues in IE11 (blinking quickhelp when modal is open)\r\n      // $(settings.target).on('transitionend', function() {\r\n      // $(settings.target).append($('.a-stickyHelp-container'));\r\n      // });\r\n    });\r\n  },\r\n\r\n  nextModalPageWithContent: function(settings) {\r\n    var current;\r\n    var modalPage = $('<div/>', {\r\n      class: 'modalPage',\r\n      html: settings.content\r\n    });\r\n\r\n    var existingPages;\r\n    var newPage;\r\n    var newPageIndex;\r\n\r\n    existingPages = $(settings.target + ' :data(page-index)');\r\n\r\n    if (settings.clearHistory) {\r\n      newPageIndex = 1;\r\n    } else {\r\n      newPageIndex = existingPages.length + 1;\r\n    }\r\n\r\n    if (settings.clearHistory) {\r\n      $(settings.target + ' :data(page-index)').not('.a-current-page').remove();\r\n    }\r\n\r\n    newPage = $('<div/>', {\r\n      class: 'a-page a-next-page',\r\n      data: {\r\n        pageIndex: newPageIndex,\r\n        isSuccess: settings.isSuccess,\r\n        isError: settings.isError,\r\n        showModalNav: settings.showModalNav\r\n      },\r\n      html: modalPage\r\n    });\r\n\r\n    // if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {\r\n    //   goToModalHeader();\r\n    // }\r\n\r\n    $(settings.target + ' .a-modal-content-target').append(newPage);\r\n    $(settings.target).trigger('loaded.altinn.modal');\r\n\r\n    $(settings.target).animate({\r\n      scrollTop: 0\r\n    }, 20);\r\n\r\n    current = $(settings.target + ' .a-current-page');\r\n\r\n    setTimeout(function() {\r\n      $('body').removeClass('a-modal-background-error a-displayNav');\r\n      $('body').removeClass('a-modal-background-success');\r\n\r\n      current.removeClass('a-current-page').addClass('a-previous-page');\r\n      newPage.removeClass('a-next-page').addClass('a-current-page');\r\n      $(newPage).data().enableDirtyPopover = settings.enableDirtyPopover;\r\n\r\n      if (settings.isError) {\r\n        $('body').addClass('a-modal-background-error');\r\n        if (settings.showModalNav) {\r\n          $('body').addClass('a-displayNav');\r\n        }\r\n      } else if (settings.isSuccess) {\r\n        $('body').addClass('a-modal-background-success');\r\n      }\r\n    }, 0);\r\n\r\n    current.on('transitionend', function() {\r\n      if (settings.clearHistory) {\r\n        $(settings.target + ' :data(page-index)').not('.a-current-page').remove();\r\n      } else {\r\n        current.hide().off();\r\n      }\r\n    });\r\n\r\n    popoverLocalInit();\r\n  },\r\n\r\n  nextModalPage: function(settings) {\r\n    var currentRequest = $.ajax({\r\n      url: settings.url,\r\n      beforeSend: function() {\r\n        if (typeof currentRequest !== 'undefined') {\r\n          currentRequest.abort();\r\n        }\r\n        AltinnLoader.addLoader($(settings.target).find('.a-current-page .a-modal-body'));\r\n      },\r\n      data: settings.data\r\n    }).always(function() {\r\n    }).done(function(data) {\r\n      var current;\r\n      var modalPage = $('<div/>', {\r\n        class: 'modalPage',\r\n        html: data\r\n      });\r\n\r\n      var existingPages;\r\n      var newPage;\r\n      var newPageIndex;\r\n\r\n      existingPages = $(settings.target + ' :data(page-index)');\r\n\r\n      if (settings.clearHistory) {\r\n        newPageIndex = 1;\r\n      } else {\r\n        newPageIndex = existingPages.length + 1;\r\n      }\r\n\r\n      if (settings.clearHistory) {\r\n        $(settings.target + ' :data(page-index)').not('.a-current-page').remove();\r\n      }\r\n\r\n      newPage = $('<div/>', {\r\n        class: 'a-page a-next-page',\r\n        data: {\r\n          pageIndex: newPageIndex,\r\n          isSuccess: settings.isSuccess,\r\n          isError: settings.isError,\r\n          showModalNav: settings.showModalNav\r\n        },\r\n        html: modalPage\r\n      });\r\n\r\n      // if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {\r\n      //   goToModalHeader();\r\n      // }\r\n\r\n      $(settings.target + ' .a-modal-content-target').append(newPage);\r\n      $(settings.target).trigger('loaded.altinn.modal');\r\n\r\n      $(settings.target).animate({\r\n        scrollTop: 0\r\n      }, 20);\r\n\r\n      current = $(settings.target + ' .a-current-page');\r\n\r\n      setTimeout(function() {\r\n        $('body').removeClass('a-modal-background-error a-displayNav');\r\n        $('body').removeClass('a-modal-background-success');\r\n\r\n        current.removeClass('a-current-page').addClass('a-previous-page');\r\n        newPage.removeClass('a-next-page').addClass('a-current-page');\r\n        $(newPage).data().enableDirtyPopover = settings.enableDirtyPopover;\r\n\r\n        if (settings.isError) {\r\n          $('body').addClass('a-modal-background-error');\r\n          if (settings.showModalNav) {\r\n            $('body').addClass('a-displayNav');\r\n          }\r\n        } else if (settings.isSuccess) {\r\n          $('body').addClass('a-modal-background-success');\r\n        }\r\n      }, 0);\r\n\r\n      current.on('transitionend', function() {\r\n        if (settings.clearHistory) {\r\n          $(settings.target + ' :data(page-index)').not('.a-current-page').remove();\r\n        } else {\r\n          current.hide().off();\r\n        }\r\n\r\n        AltinnLoader.removeLoader(current.find('.a-modal-body'));\r\n      });\r\n\r\n      popoverLocalInit();\r\n    });\r\n  },\r\n\r\n  previousModalPage: function(settings) {\r\n    var current;\r\n    var allPages;\r\n    var previous;\r\n    var pagesToPop;\r\n    var isError;\r\n    var showModalNav;\r\n    var isSuccess;\r\n\r\n    if (!settings.pagesToPop) {\r\n      pagesToPop = 1;\r\n    } else {\r\n      pagesToPop = settings.pagesToPop;\r\n    }\r\n\r\n    if ($(settings.target + ' .a-current-page').data('page-index') - pagesToPop <= 0) {\r\n      $(settings.target).one('hidden.bs.modal', function() {\r\n        $('body').removeClass('a-modal-background-error a-displayNav');\r\n        $('body').removeClass('a-modal-background-success');\r\n      });\r\n\r\n      $(settings.target).modal('hide');\r\n      return;\r\n    }\r\n\r\n    current = $(settings.target + ' .a-current-page');\r\n    allPages = $(settings.target + ' :data(page-index)');\r\n    previous = allPages.filter(function() {\r\n      return $(this).data('page-index') === allPages.length - 1;\r\n    });\r\n\r\n    previous.show();\r\n    isError = $(previous).data().isError;\r\n    showModalNav = $(previous).data().showModalNav;\r\n    isSuccess = $(previous).data().isSuccess;\r\n\r\n    current.addClass('a-next-page');\r\n    current.removeClass('a-current-page');\r\n\r\n    // if (navigator.userAgent.match(/iPhone|iPad|iPod/i)) {\r\n    //   goToModalHeader();\r\n    // }\r\n\r\n    setTimeout(function() {\r\n      $('body').removeClass('a-modal-background-error a-displayNav');\r\n      $('body').removeClass('a-modal-background-success');\r\n\r\n      previous.addClass('a-current-page').removeClass('a-previous-page');\r\n\r\n      if (isError) {\r\n        $('body').addClass('a-modal-background-error');\r\n        if (showModalNav) {\r\n          $('body').addClass('a-displayNav');\r\n        }\r\n      } else if (isSuccess) {\r\n        $('body').addClass('a-modal-background-success');\r\n      }\r\n    }, 0);\r\n\r\n    current.on('transitionend', function() {\r\n      var previousPages = allPages.filter(function() {\r\n        return $(this).data('page-index') > allPages.length - pagesToPop;\r\n      });\r\n      previousPages.remove();\r\n    });\r\n  },\r\n\r\n  setCurrentPageIsDirty: function(target, state) {\r\n    $(target).find('.a-current-page').first().data().isDirty = state;\r\n  },\r\n\r\n  init: function() {\r\n    var that = this;\r\n    $('body').on('click', '[data-toggle=\"altinn-modal\"]', function() {\r\n      var $source = $(this);\r\n      if ($source.data().action === 'load') {\r\n        that.loadModal({\r\n          url: $source.data().url,\r\n          target: $source.data().target,\r\n          enableDirtyPopover: $source.data().enableDirtyPopover\r\n        });\r\n      } else if ($source.data().action === 'next') {\r\n        that.nextModalPage({ url: $source.data().url,\r\n          target: $source.data().target,\r\n          isSuccess: $source.data().isSuccess,\r\n          isError: $source.data().isError,\r\n          showModalNav: $source.data().showModalNav,\r\n          clearHistory: $source.data().clearHistory,\r\n          enableDirtyPopover: $source.data().enableDirtyPopover });\r\n      } else if ($source.data().action === 'back') {\r\n        that.previousModalPage({\r\n          target: $source.data().target,\r\n          pagesToPop: $source.data().pages\r\n        });\r\n      } else if ($source.data().action === 'close') {\r\n        that.closeModal({ target: $source.data().target });\r\n      }\r\n    });\r\n\r\n    $('body').on('click', '.a-modal-back', function() {\r\n      var $modal = $(this).closest('.a-modal');\r\n      if ($modal.find('.a-current-page').first().data().enableDirtyPopover\r\n        && $modal.find('.a-current-page').first().data().isDirty) {\r\n        $(this).popover('show');\r\n      } else {\r\n        that.previousModalPage({ target: '#' + $modal[0].id });\r\n      }\r\n    });\r\n\r\n    $('body').on('click', '.a-modal-close', function() {\r\n      var $modal = $(this).closest('.a-modal');\r\n      if ($modal.find('.a-current-page').first().data().enableDirtyPopover\r\n        && $modal.find('.a-current-page').first().data().isDirty) {\r\n        $(this).popover('show');\r\n      } else {\r\n        that.closeModal({ target: '#' + $modal[0].id });\r\n      }\r\n    });\r\n\r\n    $('body').on('click', '.a-js-modal-dirtyBackBtn', function() {\r\n      AltinnModal.previousModalPage({ target: '#' + $(this).closest('.a-modal')[0].id });\r\n      $('button[aria-describedby=' + $(this).parent().parent().attr('id') + ']').popover('hide');\r\n    });\r\n\r\n    $('body').on('click', '.a-js-modal-dirtyCancelBtn', function() {\r\n      $('button[aria-describedby=' + $(this).parent().parent().attr('id') + ']').popover('hide');\r\n    });\r\n\r\n    $('body').on('click', '.a-js-modal-dirtyCloseBtn', function() {\r\n      AltinnModal.closeModal({ target: '#' + $(this).closest('.a-modal')[0].id });\r\n      $('button[aria-describedby=' + $(this).parent().parent().attr('id') + ']').popover('hide');\r\n    });\r\n\r\n    function urlQuery(query) { // Parse current URL for query value\r\n      var _query = query.replace(/[[]/, '[').replace(/[\\]]/, '\\\\]');\r\n      var expr = '[\\\\?&]' + _query + '=([^&#]*)';\r\n      var regex = new RegExp(expr);\r\n      var results = regex.exec(window.location.href);\r\n      if (results !== null) {\r\n        return results[1];\r\n      }\r\n      return false;\r\n    }\r\n    if (urlQuery('form') === '1') {\r\n      AltinnModal.loadModal({\r\n        url: '/hjelp/kontaktskjema-for-hjelp/',\r\n        target: '#modal'\r\n      });\r\n    }\r\n  }\r\n};\r\n","/* globals currentRequest, AltinnQuickhelp */\r\n/* globals AltinnQuickhelp:true */\r\nAltinnQuickhelp = {\r\n  listeners: function(target) {\r\n    var that = this;\r\n    $('.a-stickyHelp-search').find('input').on('keyup', function(e) {\r\n      var keyCode = e.keyCode || e.which;\r\n      if (keyCode === 13 && encodeURIComponent($(this)[0].value).length > 0) {\r\n        that.nextquickhelpPage({\r\n          url: $('#a-stickyHelp').attr('data-api') +\r\n            encodeURIComponent($(this)[0].value) + '/' + $('html').attr('lang'),\r\n          target: target\r\n        });\r\n      }\r\n    });\r\n    $('.a-stickyHelp-search').find('button').on('click', function(e) {\r\n      if (encodeURIComponent($('.a-js-stickyhelpSearch')[0].value).length > 0) {\r\n        that.nextquickhelpPage({\r\n          url: $('#a-stickyHelp').attr('data-api') +\r\n            encodeURIComponent($('.a-js-stickyhelpSearch')[0].value) + '/' +\r\n            $('html').attr('lang'),\r\n          target: target\r\n        });\r\n      }\r\n    });\r\n  },\r\n  nextquickhelpPage: function(settings) {\r\n    var currentRequest = $.ajax({\r\n      url: settings.url,\r\n      beforeSend: function() {\r\n        if (typeof currentRequest !== 'undefined') {\r\n          currentRequest.abort();\r\n        }\r\n      }\r\n    }).done(function(data) {\r\n      var quickhelpPage = $('<div/>', { class: 'quickhelpPage', html: data });\r\n      var current; var existingPages; var newPage; var newPageIndex;\r\n      existingPages = $(settings.target + ' :data(page-index)');\r\n      newPageIndex = existingPages.length + 1;\r\n      newPage = $('<div/>', {\r\n        class: 'a-page a-next-page',\r\n        data: { 'page-index': newPageIndex },\r\n        html: quickhelpPage\r\n      });\r\n      $(settings.target + ' .a-stickyHelp-content-target').append(newPage);\r\n      $(settings.target).animate({ scrollTop: 0 }, 20);\r\n      current = $(settings.target + ' .a-current-page');\r\n      setTimeout(function() {\r\n        current.removeClass('a-current-page').addClass('a-previous-page');\r\n        newPage.removeClass('a-next-page').addClass('a-current-page');\r\n        $(newPage).data();\r\n      }, 0);\r\n      current.on('transitionend', function() {\r\n        if (settings.clearHistory) {\r\n          $(settings.target + ' :data(page-index)').not('.a-current-page')\r\n            .remove();\r\n        } else {\r\n          current.off();\r\n        }\r\n      });\r\n      $('#a-js-stickyHelp-back').addClass('d-block');\r\n    });\r\n  },\r\n  previousquickhelpPage: function(settings) {\r\n    var current; var allPages; var previous; var pagesToPop;\r\n    if (!settings.pagesToPop) {\r\n      pagesToPop = 1;\r\n    } else {\r\n      pagesToPop = settings.pagesToPop;\r\n    }\r\n    current = $(settings.target + ' .a-current-page');\r\n    allPages = $(settings.target + ' :data(page-index)');\r\n    previous = allPages.filter(function() {\r\n      return $(this).data('page-index') === allPages.length - 1;\r\n    });\r\n    previous.addClass('a-current-page').removeClass('a-next-page');\r\n    current.removeClass('a-current-page').addClass('a-next-page');\r\n    setTimeout(function() {\r\n      previous.addClass('a-current-page').removeClass('a-previous-page');\r\n    }, 0);\r\n    current.on('transitionend', function() {\r\n      var previousPages = allPages.filter(function() {\r\n        return $(this).data('page-index') > allPages.length - pagesToPop;\r\n      });\r\n      previousPages.remove();\r\n    });\r\n    if (allPages.length === 2) {\r\n      $('#a-js-stickyHelp-back').removeClass('d-block');\r\n    }\r\n  },\r\n  init: function() {\r\n    var that = this; that.listeners('#a-stickyHelp');\r\n    $('body').on('click', '[data-toggle=\"quickhelp\"]', function() {\r\n      var $source = $(this);\r\n      if ($source.data().action === 'next') {\r\n        that.nextquickhelpPage({\r\n          url: $source.data().url, target: $source.data().target\r\n        });\r\n      } else if ($source.data().action === 'back') {\r\n        that.previousquickhelpPage({\r\n          target: $source.data().target, pagesToPop: $source.data().pages\r\n        });\r\n      }\r\n    });\r\n    $('.a-current-page').data({ 'page-index': 1 });\r\n    $('.a-js-stickyHelpCategory')\r\n      .html($('#a-stickyHelp').find('.a-stickyHelp-content-target')\r\n        .attr('data-category')\r\n      );\r\n    $('.a-js-stickyHelpCategoryLink').attr('data-url', $('#a-stickyHelp')\r\n      .find('.a-stickyHelp-content-target').attr('data-url')\r\n    );\r\n    $('body').on('click', '.a-stickyHelp-open', function() {\r\n      if (!$('.a-js-stickyHelpFrame').attr('src')) {\r\n        $('.a-js-stickyHelpFrame')\r\n          .attr('src', $('.a-js-stickyHelpFrame').attr('data-src'));\r\n      }\r\n    });\r\n    if ($('.quickhelpPage').find('.a-text').length !== 0) {\r\n      $('.quickhelpPage').parent('.a-page').addClass('a-page-hasArticleInside');\r\n    }\r\n  }\r\n};\r\n","/* globals enableIOS11Fix, disableIOS11Fix, iOS11BugWorkAround */\r\n\r\nvar enableIOS11Fix = function() {\r\n  // We disable scrolling by hiding everything not in view\r\n  document.body.style.overflow = 'hidden';\r\n  document.body.style.position = 'fixed';\r\n  // It seems we don't need to set these, but I'm leaving there here for now\r\n  // Should be reversed in the disableIOS11Fix function if we enable them\r\n  // document.body.style.height = '100%';\r\n  // document.body.style.width = '100%';\r\n};\r\n\r\nvar disableIOS11Fix = function() {\r\n  document.body.style.overflow = 'auto';\r\n  document.body.style.position = 'static';\r\n};\r\n\r\nvar isAffectedPlatform = function() {\r\n  // Needs to be updated if new versions are affected\r\n  var ua = navigator.userAgent;\r\n  var iOS = /iPad|iPhone|iPod/.test(ua);\r\n  var iOS11 = /OS 11_/.test(ua);\r\n\r\n  return (iOS && iOS11);\r\n};\r\n\r\nvar iOS11BugWorkAround = function() {\r\n  // Detect iOS 11_x affected by cursor position bug\r\n  // Bug report: https://bugs.webkit.org/show_bug.cgi?id=176896\r\n  if (isAffectedPlatform()) {\r\n    // This should run in the parent page only, not in the modal\r\n    if ($('body.a-stickyHelp-body').length === 0) {\r\n      // We enable the fix only when the help button is clicked/tapped\r\n      $('.a-stickyHelp-open').on('click', function() {\r\n        enableIOS11Fix();\r\n      });\r\n    }\r\n\r\n    // This should be running inside the iframe\r\n    $('.a-stickyHelp-close').on('click', function() {\r\n      // When the close button in the sticky help window is clicked/tapped\r\n      // we disable the fix, otherwise the page will not scroll\r\n      window.parent.disableIOS11Fix();\r\n    });\r\n  }\r\n};\r\n\r\n","/*\r\n  globals\r\n  AltinnModal,\r\n  AltinnQuickhelp,\r\n  handleFocus,\r\n  iOS11BugWorkAround,\r\n  window,\r\n*/\r\nwindow.infoportalInit = function() {\r\n  AltinnModal.init();\r\n  AltinnQuickhelp.init();\r\n  handleFocus();\r\n  iOS11BugWorkAround();\r\n};\r\nwindow.infoportalInit();\r\n// $(document).foundation();\r\n"]}